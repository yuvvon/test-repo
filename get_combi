class ColorCombination:
    """
    class for represent color combination
    """

    def __init__(self, top: str, bottom: str):
        """
        constructor
        :param top: color of top
        :param bottom: color of bottom
        """
        self.__top = top  # "__name" means private attribute/method
        self.__bottom = bottom

    @property  # "@property" decorator meas getter
    def top(self):
        return self.__top

    @property
    def bottom(self):
        return self.__bottom

    # if you need setter, use decorator like this
    @top.setter
    def top(self, top):
        self.__top = top

    @bottom.setter
    def bottom(self, bottom):
        self.__bottom = bottom

    def __eq__(self, other):  # 다른 인스턴스 값과 같은지 비교
        return self.top == other.bottom and self.bottom == other.bottom


# Example: ColorCombination("WHITE", "SKYBLUE") -> top == "WHITE", bottom == "SKYBLUE"


"""
LIGHTBLUE = 연청 / DARKBLUE = 진청
data reference
        https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=kkulkkuls&logNo=221587846538
        https://m.blog.naver.com/ktaitai1/221936224085
"""
combinations = [
    ColorCombination("WHITE", "DARKBLUE"),
    ColorCombination("WHITE", "LIGHTBLUE"),
    ColorCombination("WHITE", "BEIGE"),
    ColorCombination("WHITE", "KHAKI"),
    ColorCombination("WHITE", "CHARCOAL"),
    ColorCombination("WHITE", "BLACK"),
    ColorCombination("NAVY", "DARKBLUE"),
    ColorCombination("NAVY", "LIGHTBLUE"),
    ColorCombination("NAVY", "BEIGE"),
    ColorCombination("NAVY", "KHAKI"),
    ColorCombination("NAVY", "CHARCOAL"),
    ColorCombination("NAVY", "BLACK"),
    ColorCombination("PINK", "DARKBLUE"),
    ColorCombination("PINK", "LIGHTBLUE"),
    ColorCombination("PINK", "BEIGE"),
    ColorCombination("PINK", "KHAKI"),
    ColorCombination("PINK", "CHARCOAL"),
    ColorCombination("PINK", "BLACK"),
    ColorCombination("YELLOW", "DARKBLUE"),
    ColorCombination("YELLOW", "LIGHTBLUE"),
    ColorCombination("YELLOW", "BEIGE"),
    ColorCombination("YELLOW", "KHAKI"),
    ColorCombination("YELLOW", "CHARCOAL"),
    ColorCombination("YELLOW", "BLACK"),
    ColorCombination("BLUE", "DARKBLUE"),
    ColorCombination("BLUE", "LIGHTBLUE"),
    ColorCombination("BLUE", "BEIGE"),
    ColorCombination("BLUE", "KHAKI"),
    ColorCombination("BLUE", "CHARCOAL"),
    ColorCombination("BLUE", "BLACK"),
    ColorCombination("GREEN", "DARKBLUE"),
    ColorCombination("GREEN", "LIGHTBLUE"),
    ColorCombination("GREEN", "BEIGE"),
    ColorCombination("GREEN", "KHAKI"),
    ColorCombination("GREEN", "CHARCOAL"),
    ColorCombination("GREEN", "BLACK"),
    ColorCombination("RED", "BLACK"),
    ColorCombination("RED", "DARKBLUE"),
    ColorCombination("MAROON", "KHAKI"),
    ColorCombination("PURPLE", "KHAKI"),
    ColorCombination("TEAL", "KHAKI"),
    ColorCombination("GRAY", "KHAKI"),
    ColorCombination("MAROON", "BLACK"),
    ColorCombination("LIGHTORANGE", "BLACK"),
    ColorCombination("PURPLE", "BLACK"),
    ColorCombination("LIGHTPINK", "BLACK"),
    ColorCombination("LIGHTGRAY", "BLACK"),
    ColorCombination("LIGHTYELLOW", "BLACK"),
    ColorCombination("TURQUOISEGREEN", "BLACK"),
    ColorCombination("NAVYBLUE", "CREAM"),
    ColorCombination("MAROON", "CREAM"),
    ColorCombination("PINK", "CREAM"),
    ColorCombination("SEAGREEN", "CREAM"),
    ColorCombination("BLACK", "CREAM"),
    ColorCombination("SPRINGBLOOM", "GRAY"),
    ColorCombination("PURPLE", "GRAY"),
    ColorCombination("AQUA", "GRAY"),
    ColorCombination("LIGHTPINK", "GRAY"),
    ColorCombination("CHERRY", "GRAY"),
    ColorCombination("BLUE", "GRAY"),
    ColorCombination("GREEN", "GRAY"),
    ColorCombination("RED", "GRAY"),
    ColorCombination("BLACK", "GRAY"),
    ColorCombination("WHITE", "GRAY"),
    ColorCombination("YELLOW", "NAVY"),
    ColorCombination("PEACH", "NAVY"),
    ColorCombination("PINK", "NAVY"),
    ColorCombination("LIGHTGREEN", "NAVY"),
    ColorCombination("PURPLE", "NAVY"),
    ColorCombination("ROYALBLUE", "NAVY"),
    ColorCombination("BROWN", "NAVY"),
    ColorCombination("MAGENTA", "NAVY"),
    ColorCombination("AQUA", "NAVY"),
    ColorCombination("CREAM", "NAVY"),
    ColorCombination("KHAKI", "NAVY"),
    ColorCombination("GRAY", "NAVY"),
    ColorCombination("MAROON", "NAVY"),
    ColorCombination("RUSTORANGE", "NAVY"),
    ColorCombination("CRIMSON", "NAVY"),
    ColorCombination("SUNNYYELLOW", "NAVY"),
    ColorCombination("WHITE", "NAVY"),
    ColorCombination("RED", "NAVY"),
    ColorCombination("BLACK", "NAVY"),
]
def get_combi(where: str, color: str) -> list:
    corList = []        #어울리는 색상을 저장하는 리스트
    if "TOP" in where:      #입력한 색상=상의
        for co in combinations:
            if co.top == color:
                corList.append(co.bottom)
    elif "BOTTOM" in where:     #입력한 색상= 하의
        for co in combinations:
            if co.bottom == color:
                corList.append(co.top)
    return corList
